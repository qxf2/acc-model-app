name: ACC model API tests

on:
  push:
    branches: [docker-compose-api-tests-workflow]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose jq

      - name: Set Environment Variables
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "NEW_DB_USER=${{ secrets.NEW_DB_USER }}" >> .env
          echo "NEW_DB_PASSWORD=${{ secrets.NEW_DB_PASSWORD }}" >> .env
          echo "NEW_DB_NAME=${{ secrets.NEW_DB_NAME }}" >> .env

      - name: Build and Start Services
        run: |
          docker-compose up --build -d

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            if docker exec acc-model-app_database_1 pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          docker exec acc-model-app_database_1 pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} || exit 1

      - name: Create a New User and Database in PostgreSQL
        run: |
          docker exec -i acc-model-app_database_1 psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} <<EOF
          CREATE USER ${{ secrets.NEW_DB_USER }} WITH PASSWORD '${{ secrets.NEW_DB_PASSWORD }}';
          CREATE DATABASE ${{ secrets.NEW_DB_NAME }};
          GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.NEW_DB_NAME }} TO ${{ secrets.NEW_DB_USER }};
          EOF

      - name: Verify PostgreSQL Users and Databases
        run: |
          docker exec -i acc-model-app_database_1 psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "\du"
          docker exec -i acc-model-app_database_1 psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "\l"

      - name: Wait for backend to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://127.0.0.1:8000/health; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend..."
            sleep 5
          done
          curl -s http://127.0.0.1:8000/health || exit 1

      - name: Get Bearer Token
        id: get_token
        run: |
          token=$(curl -X 'POST' \
              'http://localhost:8000/token' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d "username=${{ secrets.NEW_DB_USER }}&password=${{ secrets.NEW_DB_PASSWORD }}" \
              -s | jq -r '.access_token') 
          echo "::set-output name=bearer_token::$token"
        env:
          USERNAME: ${{ secrets.NEW_DB_USER }}
          PASSWORD: ${{ secrets.NEW_DB_PASSWORD }}

      - name: Export Bearer Token
        run: |
          echo "export BEARER_TOKEN=${{ steps.get_token.outputs.bearer_token }}" >> $GITHUB_ENV

      - name: Run API Tests
        run: |
          pip install -r tests/requirements.txt
          python -m pytest tests/tests/test_end_to_end_api_test.py

      - name: Shut down Docker Compose
        run: docker-compose down
